// FE ch·ªâ g·ª≠i d·ªØ li·ªáu l√™n BE, kh√¥ng t·∫°o ch·ªØ k√Ω, kh√¥ng g·ªçi tr·ª±c ti·∫øp PayOS API

// PayOS FE config: ch·ªâ c·∫ßn returnUrl/cancelUrl ƒë·ªÉ g·ª≠i l√™n BE
export const PAYOS_FE_CONFIG = {
  returnUrl: `${window.location.origin}/booking/payos-return`,
  cancelUrl: `${window.location.origin}/booking/payos-return`,
};

// PayOS interfaces theo docs
export interface IPayOSCreateRequest {
  amount: number;
  bookingId: string;
  description?: string;
  buyerName?: string;
  buyerEmail?: string;
  buyerPhone?: string;
}

export interface IPayOSCreateResponse {
  paymentUrl: string;
  paymentRef: string;
  qrCode?: string;
}

export interface IPayOSReturnParams {
  code: string;
  id: string;
  cancel: boolean;
  status: string;
  orderCode: string;
}

// Note: Item shape is handled on BE; FE doesn't need item typing here

// Generate PayOS payment URL theo docs ch√≠nh th·ª©c
// FE ch·ªâ g·ª≠i d·ªØ li·ªáu booking/payment l√™n BE, nh·∫≠n v·ªÅ paymentUrl, qrCode...
export const createPayOSPayment = async (
  paymentData: IPayOSCreateRequest
): Promise<IPayOSCreateResponse> => {
  // Validate required parameters
  if (!paymentData.amount || paymentData.amount <= 0) {
    throw new Error("PayOS: Invalid amount");
  }
  if (!paymentData.bookingId) {
    throw new Error("PayOS: Missing booking ID");
  }

  // G·ª≠i request l√™n BE
  const response = await fetch("/api/v1/payments/payos/create", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      ...paymentData,
      returnUrl: PAYOS_FE_CONFIG.returnUrl,
      cancelUrl: PAYOS_FE_CONFIG.cancelUrl,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || "PayOS BE error");
  }
  const responseData = await response.json();

  // Normalize various backend response shapes to a unified interface
  const payload = responseData?.data ?? responseData;

  const paymentUrl =
    payload?.paymentUrl ||
    payload?.checkoutUrl ||
    payload?.paymentLink ||
    payload?.redirectUrl;

  const paymentRef =
    payload?.paymentRef ||
    payload?.orderCode ||
    payload?.paymentLinkId ||
    payload?.paymentId;

  if (!paymentUrl) {
    throw new Error("PayOS: Backend did not return a payment URL");
  }

  return {
    paymentUrl,
    paymentRef,
    qrCode: payload?.qrCode,
  } as IPayOSCreateResponse;
};

// Verify PayOS webhook/return theo docs
export const verifyPayOSReturn = (params: IPayOSReturnParams): boolean => {
  try {
    console.log("üîç PayOS - Verifying return params:", params);

    // PayOS verification logic theo docs
    // Success: code = "00" v√† status = "PAID" (kh√¥ng b·ªã cancel)
    if (params.code === "00" && params.status === "PAID" && !params.cancel) {
      console.log("‚úÖ PayOS payment verified successfully");
      return true;
    } else {
      console.log("‚ùå PayOS payment verification failed:", {
        code: params.code,
        status: params.status,
        cancel: params.cancel,
      });
      return false;
    }
  } catch (error) {
    console.error("PayOS verification error:", error);
    return false;
  }
};

// Get PayOS error message by code theo docs
export const getPayOSErrorMessage = (code: string): string => {
  const errorMessages: { [key: string]: string } = {
    "00": "Giao d·ªãch th√†nh c√¥ng",
    "01": "Giao d·ªãch th·∫•t b·∫°i",
    "02": "Giao d·ªãch b·ªã h·ªßy",
    "03": "Giao d·ªãch b·ªã t·ª´ ch·ªëi",
    "04": "Giao d·ªãch h·∫øt h·∫°n",
    "05": "S·ªë d∆∞ kh√¥ng ƒë·ªß",
    "06": "Th√¥ng tin kh√¥ng h·ª£p l·ªá",
    "07": "H·ªá th·ªëng b·∫£o tr√¨",
    "99": "L·ªói kh√°c",
  };

  return errorMessages[code] || `L·ªói kh√¥ng x√°c ƒë·ªãnh (M√£: ${code})`;
};

// FE g·ªçi BE ƒë·ªÉ l·∫•y th√¥ng tin thanh to√°n PayOS
export const getPayOSPaymentInfo = async (orderCode: string) => {
  const response = await fetch(`/api/v1/payments/payos/info/${orderCode}`);
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || "PayOS BE error");
  }
  return await response.json();
};

// FE g·ªçi BE ƒë·ªÉ l·∫•y tr·∫°ng th√°i thanh to√°n PayOS (PENDING/PAID/FAILED...)
export const getPayOSPaymentStatus = async (orderCode: string) => {
  const response = await fetch(`/api/v1/payments/payos/status/${orderCode}`);
  if (!response.ok) {
    // 202 can be used to indicate pending; still return json for caller to interpret
    try {
      const data = await response.json();
      return data;
    } catch {
      throw new Error("PayOS BE status error");
    }
  }
  return await response.json();
};

// FE g·ªçi BE ƒë·ªÉ h·ªßy thanh to√°n PayOS
export const cancelPayOSPayment = async (
  orderCode: string,
  reason?: string
) => {
  const response = await fetch(`/api/v1/payments/payos/cancel/${orderCode}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ reason }),
  });
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || "PayOS BE error");
  }
  return await response.json();
};

// Test PayOS payment creation (FE g·ªçi BE, d√πng data th·∫≠t)
export const testPayOSPayment = (data: IPayOSCreateRequest) => {
  return createPayOSPayment(data);
};
